{
  "name": "ert",
  "version": "1.0.1",
  "description": "Express routing templates provides a simple micro-templating syntax for building strings from a template and a `request` object.",
  "main": "index.js",
  "scripts": {
    "test": "node test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ForbesLindesay/ert.git"
  },
  "keywords": [
    "express",
    "routing",
    "template",
    "redirect",
    "expression"
  ],
  "author": {
    "name": "ForbesLindesay"
  },
  "license": "MIT",
  "dependencies": {
    "character-parser": "~1.0.0"
  },
  "readme": "# ert\r\n\r\nExpress routing templates provides a simple micro-templating syntax for building strings from a template and a `request` object.\r\n\r\n[![Build Status](https://travis-ci.org/ForbesLindesay/ert.png?branch=master)](https://travis-ci.org/ForbesLindesay/ert)\r\n[![Dependency Status](https://gemnasium.com/ForbesLindesay/ert.png)](https://gemnasium.com/ForbesLindesay/ert)\r\n\r\n## Installation\r\n\r\n    $ npm install ert\r\n\r\n## Usage\r\n\r\n```js\r\nvar ert = require('ert');\r\nvar express = require('express');\r\nvar app = express();\r\n\r\napp.get('/:package', function (req, res) {\r\n  res.redirect(ert(req, '/package/:package'));\r\n});\r\n\r\napp.listen(3000);\r\n```\r\n\r\n## Syntax\r\n\r\n### Code Blocks\r\n\r\ne.g.\r\n\r\n```js\r\nert(req, '/foo/bar/[req.parms.x || \"default-x\"]')\r\n```\r\n\r\nCode in squre brackets (`[` and `]`) is evalutated as a JavaScript expression.  It has `req` available as an object.  It also supports shortcuts, so you could write the above as:\r\n\r\n```js\r\nert(req, '/foo/bar/[:x || \"default-x\"]')\r\n```\r\n\r\n### Shortucts\r\n\r\nThere are characters that are shortucts, the defaults of these are:\r\n\r\n```js\r\nexports.shortcutMap = {\r\n  ':': 'req.params',\r\n  '$': 'req.query',\r\n  '@': 'req.body'\r\n};\r\n```\r\n\r\nThese can be used directly like:\r\n\r\n```js\r\nert(req, '/foo/bar/:x')\r\n```\r\n\r\nwhich is equivallent to:\r\n\r\n```js\r\nert(req, '/foo/bar/[req.params && req.params[\"x\"]]')\r\n```\r\n\r\n## API\r\n\r\n### ert(req, src) or ert.translate(req, src)\r\n\r\nTransforms the string with `req` and returns the resulting string.  It caches the compiled function so should be pretty good for performance.\r\n\r\n### ert.compile(src)\r\n\r\nCompiles `src` and returns a JavaScript expression as a string.  This can be used to generate client side code with something like:\r\n\r\n```js\r\nfunction client(name) {\r\n  return 'function name(req){return ' + ert.compile(src) + '}';\r\n}\r\n```\r\n\r\n### ert.compileFn(src)\r\n\r\nCompiles `src` and returns a function which expects a single argument, `request`.\r\n\r\n## License\r\n\r\nMIT\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ForbesLindesay/ert/issues"
  },
  "_id": "ert@1.0.1",
  "dist": {
    "shasum": "47ac570bb05a42b7f73cb188abec7b3d2019f730"
  },
  "_from": "ert@1.0.1",
  "_resolved": "https://registry.npmjs.org/ert/-/ert-1.0.1.tgz"
}
